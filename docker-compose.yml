version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - pgvector
      - redis
      - mlflow
    networks:
      - network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    restart: unless-stopped

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "8501:8501"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - network
    restart: unless-stopped

  pgvector:
    image: ankane/pgvector:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/docker/volumes/apa-db/_data
    networks:
      - network
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - network
    restart: unless-stopped

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_ARTIFACT_URI=${MLFLOW_ARTIFACT_URI}
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    networks:
      - network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - network
    restart: unless-stopped

volumes:
  pgvector_data:
  mlflow_data:
  minio_data:

networks:
  network:
    driver: bridge
